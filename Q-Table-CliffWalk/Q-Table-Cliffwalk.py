{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport gym\nimport matplotlib.pyplot as plt\n\nclass Q_Table:\n    def __init__(self, states, actions, alpha, gamma, eps_decay_rate = 0.9, min_eps = 0.01):\n        self.num_states = states\n        self.num_actions = actions\n        self.alpha = alpha\n        self.gamma = gamma\n        self.eps = 1\n        self.eps_decay_rate = eps_decay_rate\n        self.min_eps = min_eps\n        #self.q_table = np.random.uniform(low=1,high=100, size=(self.num_states,self.num_actions))\n        self.q_table = np.zeros((self.num_states,self.num_actions))\n    \n    def reset_state(self):\n        self.eps *= self.eps_decay_rate\n        self.eps = min(self.eps, self.min_eps)\n        \n    def get_action(self, state):\n        if np.random.uniform() < self.eps:\n            action = np.random.choice([action for action in range(self.num_actions)]) \n        else:\n            action = np.argmax(self.q_table[state])\n        self.last_state = state\n        self.last_action = action\n        return action\n    \n    def act(self, new_state, reward):\n        target = reward+self.gamma*max(self.q_table[new_state])\n        current = self.q_table[self.last_state][self.last_action]\n        current = current + self.alpha *(target - current)\n        self.q_table[self.last_state][self.last_action] = current\n        \n    def get_policy(self):\n        policy = np.array([np.argmax(self.q_table[state]) for state in range(48)]).reshape(4,12)\n        return policy\n        \n    \nif __name__ == '__main__':\n    print('Hello World')\n    env = gym.make('CliffWalking-v0')\n    q_table = Q_Table(env.observation_space.n, env.action_space.n, 0.02, 0.99)\n    N = 5000\n    rewards = np.empty(N)\n    ave_rewards = []\n    \n    for i in range(N):\n        if i%100 == 0:\n            print(\"Processing round: \", i)\n        state, _ = env.reset()\n        q_table.reset_state()\n        done = False\n        reward = 0\n        while not done:\n            action = q_table.get_action(state)\n            new_state, cur_reward, done, _, _ = env.step(action)\n            reward += cur_reward\n            q_table.act(new_state, cur_reward)\n            state = new_state\n        rewards[i] = reward\n        ave_rewards.append(rewards[max(0,i-100):i].mean())\n    plt.plot(ave_rewards)\n    policy = q_table.get_policy()\n    policy[3,1:11] = -1\n    print(\"\\nEstimated Optimal Policy (UP = 0, RIGHT = 1, DOWN = 2, LEFT = 3, N/A = -1):\")\n    print(policy)\n    print(\"Rewards: \",ave_rewards[-1])","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-26T04:28:23.122197Z","iopub.execute_input":"2024-09-26T04:28:23.122645Z","iopub.status.idle":"2024-09-26T04:28:27.796905Z","shell.execute_reply.started":"2024-09-26T04:28:23.122603Z","shell.execute_reply":"2024-09-26T04:28:27.795764Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Hello World\nProcessing round:  0\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_29/3391524977.py:63: RuntimeWarning: Mean of empty slice.\n  ave_rewards.append(rewards[max(0,i-100):i].mean())\n","output_type":"stream"},{"name":"stdout","text":"Processing round:  100\nProcessing round:  200\nProcessing round:  300\nProcessing round:  400\nProcessing round:  500\nProcessing round:  600\nProcessing round:  700\nProcessing round:  800\nProcessing round:  900\nProcessing round:  1000\nProcessing round:  1100\nProcessing round:  1200\nProcessing round:  1300\nProcessing round:  1400\nProcessing round:  1500\nProcessing round:  1600\nProcessing round:  1700\nProcessing round:  1800\nProcessing round:  1900\nProcessing round:  2000\nProcessing round:  2100\nProcessing round:  2200\nProcessing round:  2300\nProcessing round:  2400\nProcessing round:  2500\nProcessing round:  2600\nProcessing round:  2700\nProcessing round:  2800\nProcessing round:  2900\nProcessing round:  3000\nProcessing round:  3100\nProcessing round:  3200\nProcessing round:  3300\nProcessing round:  3400\nProcessing round:  3500\nProcessing round:  3600\nProcessing round:  3700\nProcessing round:  3800\nProcessing round:  3900\nProcessing round:  4000\nProcessing round:  4100\nProcessing round:  4200\nProcessing round:  4300\nProcessing round:  4400\nProcessing round:  4500\nProcessing round:  4600\nProcessing round:  4700\nProcessing round:  4800\nProcessing round:  4900\n\nEstimated Optimal Policy (UP = 0, RIGHT = 1, DOWN = 2, LEFT = 3, N/A = -1):\n[[ 2  3  1  3  0  1  1  1  1  2  2  2]\n [ 1  0  0  3  1  0  1  2  2  1  2  2]\n [ 1  1  1  1  1  1  1  1  1  1  1  2]\n [ 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  0]]\nRewards:  -13.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]}]}